// Final.QuadraticEquationWithStruct.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <cmath>

struct Roots
{
    double x1;
    double x2;
};

Roots calcRoots(double, double, double);

int main()
{
    setlocale(LC_ALL, "rus");
    double a, b, c;
    // Запрос коэффицентов
    std::cout << "Введите три коэффицента уравнения (a, b, c)." << std::endl;
    std::cout << "Введите первый коэффицент (не равен нулю): " << std::endl;
    std::cin >> a;
    std::cout << "Введите второй коэффицент: " << std::endl;
    std::cin >> b;
    std::cout << "Введите третий коэффицент: " << std::endl;
    std::cin >> c;

    Roots roots = calcRoots(a, b, c);
    if(roots.x1 == 0 && roots.x2 == 0)
        std::cout << "Корней уравнения с коэффициентами a = "
        << a << ", b = " << b << ", c = " << c << " нет.";
    else
        std::cout << "Корни уравнения с коэффициентами a = "
        << a << ", b = " << b << ", c = " << c
        << " равны: x1 = " << roots.x1 << ", x2 = " << roots.x2 << std::endl;
}

Roots calcRoots(double a, double b, double c)
{
    Roots roots;
    double discriminant = pow(b, 2) - 4 * a * c;

    // Вычисление корней уравнения, которые, исходя из значения дискриминанта,
    // имеют разное значение
    if (discriminant > 0)
    {
        roots.x1 = (-b + sqrt(discriminant)) / (2 * a);
        roots.x2 = (-b - sqrt(discriminant)) / (2 * a);
    }

    // Вычисление корней уравнения, которые, исходя из значения дискриминанта,
    // равны
    else if (discriminant == 0)
    {
        roots.x1 = -(b / (2 * a));
        roots.x2 = roots.x1;
    }

    // Обозначение того, что корней в уравнении нет
    else
    {
        roots.x1 = roots.x2 = 0;
    }

    return roots;
}
// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
